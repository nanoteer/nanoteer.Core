using Nanoteer.Core.Exceptions;
using System.Collections;

namespace Nanoteer.Core
{
    public class Socket
    {
        internal bool _registered = false;
        internal static ArrayList _sockets = new ArrayList();

        /// <summary>
        /// The socket number corresponding to this socket.  On mainboards, this is a positive number and is printed on the board itself. 
        /// For module-provided sockets (i.e. sockets you plug other modules into) this is an automatically generated negative number.
        /// </summary>
        public int SocketNumber { get; private set; }

        /// <summary>
        /// The name of the socket.  This is shown to users in any socket-related error messages generated by Gadgeteer Core.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// Array of pins used by the socket.  This is always of size 11, with index [1] to [10] being the relevant Cpu.Pin for the Socket.Pin.
        /// Index 0 is unused.
        /// </summary>
        public int[] SocketPins { get; private set; }

        /// <summary>
        /// The supported types of this socket.  
        /// </summary>
        public SocketType SupportedTypes
        {
            get
            {
                return _SupportedTypes;
            }
            set
            {
                if (_registered) throw new SocketImmutableAfterRegistrationException();
                _SupportedTypes = value;
            }
        }
        private SocketType _SupportedTypes = new SocketType { };

        /// <summary>
        /// An unspecified CPU pin (e.g. for a socket which does not use this pin).
        /// </summary>
        public static readonly int UnspecifiedPin = -1;

        /// <summary>
        /// A special socket number indicating that a module socket is not used.
        /// </summary>
        public static int Unused { get { return int.MinValue; } }

        public Socket(int socketNumber, SocketType socketTypes)
        {
            Name = socketNumber.ToString();
            SocketNumber = socketNumber;
            SupportedTypes = socketTypes;
            SocketPins = new int[11]{ UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin,
                                        UnspecifiedPin };
        }

        public static bool TryRegisterSocket(Socket socket)
        {
            if (AttachToSocket(socket.SocketNumber, socket.SupportedTypes) == null)
            {
                lock (_sockets)
                {
                    _sockets.Add(socket);
                    socket._registered = true;
                    return true;
                }
            }
            throw new InvalidSocketException("Cannot register socket - socket number " + socket.SocketNumber + " already used");
        }

        public static Socket AttachToSocket(int socketNumber, SocketType socketType)
        {
            if (socketNumber < 0)
            {
                return null;
            }
            lock (_sockets)
            {
                for (int i = 0; i < _sockets.Count; i++)
                {
                    Socket socket = (Socket)_sockets[i];
                    if (socket.SocketNumber == socketNumber)
                    {
                        if ((socketType & socket.SupportedTypes) == 0)
                        {
                            return null;
                        }
                        return socket;
                    }
                }
            }
            return null;
        }

    }
}
